name: Deploy to Staging

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    concurrency:
      group: deploy-staging-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: 🛠️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          show-progress: false

      - name: 🌐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 Install dependencies
        run: |
          npm ci --no-fund --no-audit --prefer-offline --progress=false
          npm audit fix --force || true

      - name: 💾 Cache Next.js Build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/standalone
            out
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: 🔧 Create .env file
        run: |
          cat > .env << EOL
          NEXT_PUBLIC_APP_URL=${{ secrets.STAGING_APP_URL }}
          NEXT_PUBLIC_ENVIRONMENT=staging
          NEXT_PUBLIC_N8N_WEBHOOK_URL=${{ secrets.N8N_WEBHOOK_URL }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}
          TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}
          MICROSOFT_SMTP_HOST=${{ secrets.MICROSOFT_SMTP_HOST }}
          MICROSOFT_SMTP_PORT=${{ secrets.MICROSOFT_SMTP_PORT }}
          MICROSOFT_SMTP_USER=${{ secrets.MICROSOFT_SMTP_USER }}
          MICROSOFT_SMTP_PASS=${{ secrets.MICROSOFT_SMTP_PASS }}
          CONTACT_EMAIL=${{ secrets.CONTACT_EMAIL }}
          FTP_SERVER=${{ secrets.STAGING_FTP_SERVER }}
          FTP_USERNAME=${{ secrets.STAGING_FTP_USERNAME }}
          FTP_PASSWORD=${{ secrets.STAGING_FTP_PASSWORD }}
          ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          CUSTOMER_USERNAME=${{ secrets.CUSTOMER_USERNAME }}
          CUSTOMER_PASSWORD=${{ secrets.CUSTOMER_PASSWORD }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }}
          EOL

      - name: 🚧 Aktiviere Wartungsmodus
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd staging.callflows.de/
            touch .maintenance

      - name: 🗄️ Backup
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd staging.callflows.de/
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups
            # Schnelles, sicheres Backup nur der wichtigsten Dateien
            timeout 120s tar -czf backups/backup-${timestamp}.tar.gz \
              --exclude='backups/*' \
              --exclude='logs/*' \
              --exclude='.maintenance' \
              --exclude='node_modules/*' \
              --exclude='.git/*' \
              --exclude='*.log' \
              --max-size=100M \
              . 2>/dev/null || echo "Backup completed with warnings"

      - name: 🧹 Empty remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd staging.callflows.de/
            rm -rf * .env
      
      - name: 🏗️ Build
        run: npm run build

      - name: 📤 Deploy to Staging
        env:
          FTP_SERVER: ${{ secrets.STAGING_FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.STAGING_FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.STAGING_FTP_PASSWORD }}
          NODE_ENV: staging
          
        run: |
          npm install --quiet ftp-deploy
          node scripts/deploy.js

      - name: 🔧 Deploy Environment Variables
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd staging.callflows.de/
            # Erstelle .env für Client-Side Environment Variables
            cat > .env << EOL
            NEXT_PUBLIC_APP_URL=${{ secrets.STAGING_APP_URL }}
            NEXT_PUBLIC_ENVIRONMENT=staging
            NEXT_PUBLIC_N8N_WEBHOOK_URL=${{ secrets.N8N_WEBHOOK_URL }}
            NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}
            EOL
            echo "Environment variables deployed to staging"

      - name: 🧹 Clean npm cache
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: 🟢 Deaktiviere Wartungsmodus
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd staging.callflows.de/
            rm -f .maintenance
